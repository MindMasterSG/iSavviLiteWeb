@model SMS.Models.UserViewModel
@{Layout = "~/Views/Shared/_LayoutTransactions.cshtml";}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script language="javascript" type="text/javascript">
    function pageValidation() {
        if (document.getElementById('Deployments').selectedIndex == 0) {
            alert("Please select Deployment");
            return false;
        }
        if (document.getElementById("LoginID").value == "") {
            alert('Please enter the LoginID');
            document.getElementById("LoginID").focus();
            return false;
        }
        if (document.getElementById("Password").value == "") {
            alert('Please enter the Password');
            document.getElementById("Password").focus();
            return false;
        }
        if (document.getElementById("cnfPWD").value == "") {
            alert('Please enter the confirm password');
            document.getElementById("cnfPWD").focus();
            return false;
        }
        if (document.getElementById("Password").value != document.getElementById("cnfPWD").value) {
            alert('Password and confirm password should be same');
            document.getElementById("cnfPWD").focus();
            return false;
        }
        if (document.getElementById("EmailID").value != "") {
            var x = document.forms[0]["EmailID"].value;
            var atpos = x.indexOf("@@");
            var dotpos = x.lastIndexOf(".");
            if (atpos < 1 || dotpos < atpos + 2 || dotpos + 2 >= x.length) {
                alert("Not a valid e-mail address");
                return false;
            }
        }
        return true;
    }
</script>
<h2>
    Create User</h2>
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true, "Please correct the below errors.")
    <fieldset><div class="check_main_bg_cont">
    <div class="check_left_cont_txt">
    <table>
    @if (Session["UserType"] != null && Session["UserType"] != "" && Session["UserType"].ToString().Equals("1"))
    {
        <tr><td>Deployment * </td><td>@Html.DropDownListFor(model => Model.Deployements, new SelectList(Model.Deployements, "DeploymentId", "DeploymentName", Model.DeploymentID), "Select", new { @class = "ddl" })</td></tr>
    }
    <tr><td>Login * </td><td>@Html.TextBoxFor(model => model.LoginID, new { @class = "bigtextfield" })
            @Html.ValidationMessageFor(model => model.LoginID)</td></tr>
    <tr><td>Name * </td><td>@Html.TextBoxFor(model => model.UserName, new { @class = "bigtextfield" })
            @Html.ValidationMessageFor(model => model.UserName)</td></tr>
    <tr><td>Email * </td><td>@Html.TextBoxFor(model => model.EmailID, new { @class = "bigtextfield" })
            @Html.ValidationMessageFor(model => model.EmailID)</td></tr>
    <tr><td>User Type * </td><td>@Html.DropDownList("ddlUserTypes", Model.UserTypes.Select(c => new SelectListItem { Text = c.UserType, Value = c.UserTypeID.ToString(), Selected = c.UserTypeID == Model.UserTypeID }))</td></tr>
    <tr><td>Password * </td><td>@Html.PasswordFor(model => model.Password)
            @Html.ValidationMessageFor(model => model.Password)</td></tr>
    <tr><td>Confirm Password * </td><td><input type="password" id="cnfPWD" name="cnfPWD" /></td></tr>
    </table>
    <div style="margin-left: 120px;">
            <input type="submit" class="btnAddUpdate" value="Add" onclick="return pageValidation();" />
            <a href="@Url.Action("UsersList", "SMSAdmin")">
                <input type="button" class="btnCancel" value="Cancel" /></a></div>
    </div>
          </div>
    </fieldset>
}
